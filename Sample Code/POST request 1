/*
 * Write a WordPress plugin in PHP for WooCommerce that sends a POST request to https://api.pluginlicensor.com/v1/create_license when a purchase is made. The body of the POST request needs a string parameter called "products" that is made by looping over the items in the cart, and if the item has an attribute called "plugin_id", then the value of that attribute will be appended to the "products" string, followed by a comma.
 */

/* There are some problems with this. I would prefer to get the plugin ids after checkout, not when items are added to the cart. */

add_action( 'woocommerce_add_to_cart', 'add_plugin_id_to_cart' );

function add_plugin_id_to_cart( $cart_item_key ) {
	global $woocommerce;

	$cart = $woocommerce->cart->get_cart();

	foreach ( $cart as $cart_item_key => $cart_item ) {
		$product_id = $cart_item['product_id'];
		$product = wc_get_product( $product_id );
		$plugin_id = $product->get_attribute( 'plugin_id' );

		if ( $plugin_id ) {
			$products = get_option( 'plugin_licensor_products' );
			$products .= $plugin_id . ',';
			update_option( 'plugin_licensor_products', $products );
		}
	}
}

add_action( 'woocommerce_checkout_update_order_meta', 'add_plugin_id_to_order' );

function add_plugin_id_to_order( $order_id ) {
	$products = get_option( 'plugin_licensor_products' );
	update_post_meta( $order_id, 'plugin_licensor_products', $products );
}

add_action( 'woocommerce_thankyou', 'send_plugin_id_to_licensor' );

function send_plugin_id_to_licensor( $order_id ) {
	$products = get_post_meta( $order_id, 'plugin_licensor_products', true );

	if ( $products ) {
		$url = 'https://api.pluginlicensor.com/v1/create_license';
		$args = array(
			'body' => array(
				'products' => $products,
			),
		);

		wp_remote_post( $url, $args );
	}
}
